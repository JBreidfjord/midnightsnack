Registration/Login:
    ✔ Define User classes in schema.py @done(21-03-06 12:11)
    ✔ Input validation (length, email, matching passwords) @done(21-03-06 12:11)
    ✔ Integrate schema with form for proper form validation @done(21-03-10 16:56)
    ✔ Create registration and login routes @done(21-03-10 20:17)

Profile Pages:
    ☐ Add profile page for each of us with descriptions/info
    ☐ Add our top posts
    ☐ Add our recent posts

☐ Replace Login/Register nav buttons with New Post/Logout when logged in
☐ How to display html elements to only certain users? E.g. delete/edit button for posts, new post button

Form Validation (Register):
    ✔ Fix form in HTML @done(21-03-10 15:09)
    ✔ Fix post request handling @done(21-03-10 16:52)
    ✔ Redirect back to get request after submission @done(21-03-10 19:26)
    ✔ Add optional query for redirect to provide error messages @done(21-03-10 19:26)
    ✔ Add optional query for redirect to provide success message (Registration successful. Welcome, {name}!) @done(21-03-10 19:26)
    ✔ Implement messages into HTML @done(21-03-10 19:26)
    ✔ Add check for if username/email already exists @done(21-03-14 10:58)
    ✔ Change from Query parameters to Cookies @done(21-03-14 11:21)
    ✔ Read cookies in HTML to display errors @done(21-03-14 11:40)

Authentication:
    ✔ Finish reading through FastAPI user guide for auth @done(21-03-12 13:26)
    ✔ Connect to database @done(21-03-12 14:19)
    ☐ Set redirects for login route
    ☐ Lock certain routes behind authentication
    ☐ Change navbar based on login status
    ✔ Logout route/function @done(21-03-13 14:37)
    ✔ Logout button in navbar @done(21-03-13 14:37)
    ☐ Set up redirects for logout route
    ☐ Move all auth related stuff to auth.py
    ☐ Set up router to access routes
    Update database to store tokens and hashed passwords:
        ✔ Change input functions to hash before storing @done(21-03-13 15:46)
        ✔ Update existing data @done(21-03-13 15:46)
        ✔ Verify model correctness @done(21-03-13 15:46)
    ✔ Verify token @done(21-03-13 13:37)
    ✔ Set scopes @done(21-03-14 15:20)

Password Reset:
    ☐ Mail via Linode, need to enable
    ☐ Set up form/page

Auto-blog:
    ☐ Convert markdown to HTML
    ☐ Create post

New features:
    ☐ Custom 404/status pages

✔ Change User schemas, base should contain only import info like username, email, image @done(21-03-13 13:48)

☐ Simplify db tasks, use onstartup and onshutdown events from fastapi

☐ Truncate post previews on home page, limit to certain character length

Admin Page:
    ☐ Permissions setting page to allow me to change a user's permissions

MD-HTML:
    ☐ Input validation on file, must be a .md file
    ☐ Input validation on form
    ☐ Input validation on data from json file

Post Editor:
    ✔ Generate random temp folder @done(21-03-16 22:43)
    Submission Page:
        ✔ Markdown file upload input @done(21-03-16 22:51)
        ☐ Image file upload input
        ☐ Config form; inputs = (title, description, date(yyyy-mm-dd), tags(multiple), imagealt, photographerurl, photographername, keywords(default to same as tags, could this update live as you input tags?))
        ☐ Validation for form data
    Route Functions:
        ✔ Get upload page, return HTMLResponse of submission page @done(21-03-16 22:47)
        ✔ Post markdown file, function converts to HTML and saves both to tmp_dir, return HTMLResponse of preview page @done(21-03-16 22:48)
        ☐ Post (with tmp_id path param); similar to original post; convert MD to HTML, update files for both in tmp_dir, return HTML file
        ☐ Get (with tmp_id path param); return markdown file
        ☐ Post /submit/{tmp_id}; server function moves files from tmp_dir to permanent dir then removes tmp_dir
    JS Functions:
        Edit Article:
            ☐ Button with click function
            ☐ Get /edit/{tmp_id}, receiving article.md response
            ☐ Read file content
            ☐ Set div innerHtml to content
            ☐ Set div contentEditable = true
        Submit Changes:
            ☐ Button with click function
            ☐ Store div innerHtml as article.md
            ☐ Post article.md to /edit/{tmp_id}, receiving article.html response
            ☐ Read file content
            ☐ Set div innerHtml to content
            ☐ Set div contentEditable = false
        Commit Article:
            ☐ Button with click function
            ☐ Confirmation pop up (like alert but with ok/cancel (confirm?))
            ☐ Post /submit/{tmp_id}