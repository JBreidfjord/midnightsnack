Registration/Login:
    ✔ Define User classes in schema.py @done(21-03-06 12:11)
    ✔ Input validation (length, email, matching passwords) @done(21-03-06 12:11)
    ✔ Integrate schema with form for proper form validation @done(21-03-10 16:56)
    ✔ Create registration and login routes @done(21-03-10 20:17)

Profile Pages:
    ☐ Add profile page for each of us with descriptions/info
    ☐ Add our top posts
    ☐ Add our recent posts

Form Validation (Register):
    ✔ Fix form in HTML @done(21-03-10 15:09)
    ✔ Fix post request handling @done(21-03-10 16:52)
    ✔ Redirect back to get request after submission @done(21-03-10 19:26)
    ✔ Add optional query for redirect to provide error messages @done(21-03-10 19:26)
    ✔ Add optional query for redirect to provide success message (Registration successful. Welcome, {name}!) @done(21-03-10 19:26)
    ✔ Implement messages into HTML @done(21-03-10 19:26)
    ✔ Add check for if username/email already exists @done(21-03-14 10:58)
    ✔ Change from Query parameters to Cookies @done(21-03-14 11:21)
    ✔ Read cookies in HTML to display errors @done(21-03-14 11:40)

Authentication:
    ✔ Finish reading through FastAPI user guide for auth @done(21-03-12 13:26)
    ✔ Connect to database @done(21-03-12 14:19)
    ✔ Set redirects for login route @done(21-03-17 17:45)
    ✔ Lock certain routes behind authentication @done(21-03-17 17:45)
    ☐ Change navbar based on login status
    Could apply global dependency to check user status, maybe just check if they have an auth cookie? less overhead than checking db that way
    ✔ Logout route/function @done(21-03-13 14:37)
    ✔ Logout button in navbar @done(21-03-13 14:37)
    ✔ Set up redirects for logout route @done(21-03-17 17:45)
    ☐ Move all auth related stuff to auth.py
    ☐ Set up router to access routes
    Update database to store tokens and hashed passwords:
        ✔ Change input functions to hash before storing @done(21-03-13 15:46)
        ✔ Update existing data @done(21-03-13 15:46)
        ✔ Verify model correctness @done(21-03-13 15:46)
    ✔ Verify token @done(21-03-13 13:37)
    ✔ Set scopes @done(21-03-14 15:20)
    ☐ Remember Me button on login page

Password Reset:
    ☐ Mail via Linode, need to enable
    ☐ Set up form/page

Auto-blog:
    ☐ Convert markdown to HTML
    ☐ Create post

New features:
    ☐ Custom 404/status pages

✔ Change User schemas, base should contain only import info like username, email, image @done(21-03-13 13:48)

☐ Simplify db tasks, use onstartup and onshutdown events from fastapi

☐ Truncate post previews on home page, limit to certain character length

Admin Page:
    ☐ Permissions setting page to allow me to change a user's permissions

Post Editor:
    ✔ Generate random temp folder @done(21-03-16 22:43)
    Submission Page:
        ✔ Markdown file upload input @done(21-03-16 22:51)
        ✔ Image file upload input @done(21-03-17 21:09)
        ✔ Config form; inputs = (title, description, tags(multiple), imagealt, photographerurl, photographername) @done(21-03-17 21:09)
        ✔ Generate date from datetime.today().strftime('%Y-%m-%d') @done(21-03-17 22:44)
        ✔ Generate keywords from tags @done(21-03-17 22:44)
        ☐ Validation for form data
    Route Functions:
        ✔ Get upload page, return HTMLResponse of submission page @done(21-03-16 22:47)
        ✔ Process submission data into config.json @done(21-03-17 22:39)
        ✔ Process header image @done(21-03-17 22:39)
        ✔ Escape HTML special characters in Markdown before sending @done(21-03-17 16:55)
        ✔ Unescape before converting @done(21-03-17 16:55)
        ✔ Post markdown file, function converts to HTML and saves both to tmp_dir, return HTMLResponse of preview page @done(21-03-16 22:48)
        ✔ Post (with tmp_id path param); similar to original post; convert MD to HTML, update files for both in tmp_dir, return HTML file @done(21-03-17 09:09)
        ✔ Get (with tmp_id path param); return markdown file @done(21-03-17 09:09)
        ✔ Post /submit/{tmp_id}; server function moves files from tmp_dir to permanent dir then removes tmp_dir @done(21-03-17 09:31)
        ✔ Commit submitted post to database @done(21-03-18 21:55)
        ✔ Return article url @done(21-03-17 22:43)
        ☐ Add auth dependencies
    JS Functions:
        Edit Article:
            ✔ Button with click function @done(21-03-17 12:01)
            ✔ Get /edit/{tmp_id}, receiving article.md response @done(21-03-17 12:01)
            ✔ Read file content @done(21-03-17 13:32)
            ✔ Set div innerHtml to content @done(21-03-17 13:32)
            ✔ Set div contentEditable = true @done(21-03-17 13:33)
            ✔ Fix text color of editable content @done(21-03-17 17:16)
            ✔ Fix behaviour of enter while editing @done(21-03-17 18:55) (moved contenteditable onto code tag, saves 2 lines as well)
            ✔ Add ability to use tab to add 4 spaces @done(21-03-17 19:08)
        Submit Changes:
            ✔ Button with click function @done(21-03-17 17:16)
            ✔ Store code#editor-block innerHtml as article.md @done(21-03-17 17:26)
            ✔ Post article.md to /edit/{tmp_id}, receiving article.html response @done(21-03-17 18:29)
            ✔ Read file content @done(21-03-17 18:29)
            ✔ Set div innerHtml to response content @done(21-03-17 18:30)
            ✔ Set div contentEditable = false @done(21-03-17 18:33)
        Commit Article:
            ✔ Button with click function @done(21-03-17 17:50)
            ✔ Confirmation pop up (like alert but with ok/cancel (confirm?)) @done(21-03-17 17:50)
            ✔ Post /submit/{tmp_id} @done(21-03-17 17:50)
            ✔ Redirect to article page if success @done(21-03-17 22:43)
    ✔ Create post.html template; inputs for json data, article content, and header image @done(21-03-18 23:56)
    ✔ Update crud.get_post and get /posts/slug route for new data; provide new variables to jinja2 @done(21-03-18 23:56)
    ☐ Create route for editing existing article; /posts/edit
    ☐ Create edit submission function for when editing existing article
    
✔ Fix image size in post.html @done(21-03-18 23:56)
☐ Fix quote block style
☐ Add href to author page in post.html

☐ Add /tags/{tag} route
☐ Get matching posts from db
☐ HTMLResponse, list all posts matching tag

☐ Change posts on home page to show title, author, date, and description

☐ Update style of login and registration forms to match submission form